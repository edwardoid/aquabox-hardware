#include "Menu.h"
#include "texts.h"
#include "Controls.h"
#include <ESP8266WiFi.h>

const int RSSI_MAX =-50;// define maximum strength of signal in dBm
const int RSSI_MIN =-100;// define minimum strength of signal in dBm

const char* States[] = {  "Idle", "Single", "Double",  "Triple", "Long" };

void handleCommandDoNothing(uint8_t& cmd)
{
  cmd = MENU_NOTHING;
}

int dBmtoPercentage(int dBm)
{
  int quality;
    if(dBm <= RSSI_MIN)
    {
        return 0;
    }
    else if(dBm >= RSSI_MAX)
    {  
        return 100;
    }
    
    return (dBm + 100) << 1;
}

#define WIFI_ICON_WIDTH 10
#define WIFI_ICON_HEIGHT 10

const unsigned char WiFiIcon [] PROGMEM=
{
0x00, 0x00, 0x22, 0x00, 0x63, 0x80, 0x7b, 0x80, 0xe3, 0xc0, 0xe3, 0xc0, 0x7b, 0x80, 0x63, 0x80, 
	0x22, 0x00, 0x00, 0x00
};

#define BYTES_PER_ICON 20
#define NO_SIGNAL_ICON 0
#define LOW_SIGNAL_ICON 1
#define MIDDLE_SIGNAL_ICON 2
#define HIGHT_SIGNAL_ICON 3
#define FIND_SIGNAL_ICON 4
#define AQUABOX_CONNECTED 5
#define AQuABOX_NOT_CONNECTED 6

#define GET_ICON_BY_OFFSET(Offset) (Icons + (Offset) * BYTES_PER_ICON)

const unsigned char Icons [] PROGMEM = {
	// 'No signal (2), 10x10px
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x55, 0x00, 0x00, 0x00, 
	// 'Low signal, 10x10px
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 
	0x55, 0x00, 0x00, 0x00, 
	// 'Middle sigmal, 10x10px
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x50, 0x00, 0x50, 0x00, 0x00, 0x00, 
	0x55, 0x00, 0x00, 0x00, 
	// 'full signal (2), 10x10px
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x15, 0x00, 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 
	0x55, 0x00, 0x00, 0x00, 
	// 'High sigmal, 10x10px
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x14, 0x00, 0x54, 0x00, 0x54, 0x00, 0x00, 0x00, 
	0x55, 0x00, 0x00, 0x00, 
	// 'Find signal, 10x10px
	0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x22, 0x00, 0x2a, 0x00, 0x22, 0x00, 0x1c, 0x00, 0x00, 0x00, 
	0x55, 0x00, 0x00, 0x00, 
	// 'Power_1, 10x10px
	0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x7b, 0x80, 0xe3, 0xc0, 0xe3, 0xc0, 0x7b, 0x80, 0x22, 0x00, 
	0x00, 0x00, 0x00, 0x00, 
	// 'Power, 10x10px
	0x00, 0x00, 0x22, 0x00, 0x63, 0x80, 0x7b, 0x80, 0xe3, 0xc0, 0xe3, 0xc0, 0x7b, 0x80, 0x63, 0x80, 
	0x22, 0x00, 0x00, 0x00
};

void drawStatusBar(Adafruit_SSD1306& display) {
  display.setTextColor(WHITE);
  display.setCursor(14, 1);
  display.setTextWrap(false);
  /*int x = 2;
  for(int i = 0; i < 8; ++i) {
    display.drawBitmap(x, 2, &(Icons[20 * i]), WIFI_ICON_WIDTH, WIFI_ICON_HEIGHT, WHITE);  
    x += 12;
  }*/
  if (WiFi.status() == WL_CONNECTED) {
      display.drawBitmap(0, 0, GET_ICON_BY_OFFSET(LOW_SIGNAL_ICON + (int)ceil(dBmtoPercentage(WiFi.RSSI()) / 25.)), WIFI_ICON_WIDTH, WIFI_ICON_HEIGHT, WHITE);
    if ((millis() / 1000) % 2)
      display.print(WiFi.localIP());
    else
      display.print(WiFi.SSID());
  }
  else {
    display.drawBitmap(0, 0, GET_ICON_BY_OFFSET(NO_SIGNAL_ICON), WIFI_ICON_WIDTH, WIFI_ICON_HEIGHT, WHITE);
    display.print(textById(TXT_NO_WIFI_CONNECTION_ID));
  }
}

void drawSimpleMenu(Adafruit_SSD1306& display, Menu* menu) {
  uint8_t b = MAX_VISIBLE_MENU_ENTRIES * (menu->selected / MAX_VISIBLE_MENU_ENTRIES);
  uint8_t e = b + MAX_VISIBLE_MENU_ENTRIES > menu->entriesCount ? menu->entriesCount : (b + MAX_VISIBLE_MENU_ENTRIES);
  for(uint8_t i = b; i < e; ++i)
    {
        if (i == menu->selected)
        {
          drawSelected(textById(menu->entries[i]), display, (i - b));
        } else {
          drawNormal(textById(menu->entries[i]), display, (i - b));
        }
    }
}